@article{Atkinson2025,
  title = {{{FTorch}}: A Library for Coupling {{PyTorch}} Models to {{Fortran}}},
  author = {Atkinson, Jack and Elafrou, Athena and Kasoar, Elliott and Wallwork, Joseph G. and Meltzer, Thomas and Clifford, Simon and Orchard, Dominic and Edsall, Chris},
  date = {2025},
  journaltitle = {Journal of Open Source Software},
  volume = {10},
  number = {107},
  pages = {7602},
  doi = {10.21105/joss.07602},
  url = {https://doi.org/10.21105/joss.07602}
}

@book{Chapman2017,
  title = {Fortran for Scientists and Engineers},
  author = {Chapman, Stephen J.},
  date = {2017-03-16},
  edition = {4},
  publisher = {McGraw Hill},
  isbn = {978-0-07-338589-1},
  langid = {english},
  pagetotal = {1056}
}

@book{Chirila2015,
  title = {Introduction to Modern Fortran for Earth System Sciences},
  author = {Chirila, Dragos and Lohmann, Gerrit},
  date = {2015},
  publisher = {Springer},
  location = {Heidelberg},
  url = {http://www.springer.com/de/book/9783642370083},
  abstract = {This work provides a short "getting started" guide to Fortran 90/95. The main target audience consists of newcomers to the field of numerical computation within Earth system sciences (students, researchers or scientific programmers). Furthermore, readers accustomed to other programming languages may also benefit from this work, by discovering how some programming techniques they are familiar with map to Fortran 95.}
}

@article{Liston2006,
  title = {A Distributed Snow-Evolution Modeling System ({{SnowModel}})},
  author = {Liston, Glen E. and Elder, Kelly},
  date = {2006},
  journaltitle = {Journal of Hydrometeorology},
  volume = {7},
  number = {6},
  pages = {1259--1276},
  doi = {10.1175/JHM548.1},
  url = {https://journals.ametsoc.org/view/journals/hydr/7/6/jhm548_1.xml}
}

@article{Liston2018,
  title = {A {{Distributed Snow-Evolution Model}} for {{Sea-Ice Applications}} ({{SnowModel}})},
  author = {Liston, Glen E. and Polashenski, Chris and Rösel, Anja and Itkin, Polona and King, Jennifer and Merkouriadi, Ioanna and Haapala, Jari},
  date = {2018-05-01},
  journaltitle = {Journal of Geophysical Research: Oceans},
  shortjournal = {Journal of Geophysical Research: Oceans},
  volume = {123},
  number = {5},
  pages = {3786--3810},
  issn = {2169-9275},
  doi = {10.1002/2017JC013706},
  url = {https://doi.org/10.1002/2017JC013706},
  urldate = {2025-05-05},
  abstract = {Abstract Snow-depth distributions on sea ice have substantial impacts on winter ice growth and summer ice melt. There are two types of wind-related snow distributions in this environment: snowdrifts that form around ice pressure ridges; and snow dunes and other snow bedforms that form on relatively level, undeformed ice. A snow-evolution modeling system (SnowModel) was tested against winter snow observations collected during the Norwegian young sea ICE expedition (N-ICE2015) north of Svalbard, with an emphasis on reproducing these two types of snow distributions. The SnowModel simulation spanned 1 year, summer 2014 through summer 2015, over a 1.5 km by 1.5 km domain, using a 1 m horizontal grid increment and 3 h time step. Existing SnowModel components, created originally for terrestrial applications, performed energy balance, snow property, snowdrift, and data assimilation calculations in response to prescribed meteorological forcings. A new SnowModel component, SnowDunes, was created to simulate snow-bedform distributions on level, undeformed ice. Model results reproduced observed snowdrift profiles around pressure ridges and snow-depth distributions over level, undeformed ice, resulting in physically realistic snow heterogeneity and property information. We conclude that the SnowModel toolkit contains the components required to simulate most processes driving the seasonal distribution of snow on sea ice. SnowModel can evolve snow on sea ice over local to pan-Arctic areas, using grid increments ranging from 1 m to tens of km, and time increments of subhourly to daily.},
  keywords = {Bedforms,Dunes,Sea ice,Snow,Snowdrifts,SnowModel}
}

@article{Mansfield2024,
  title = {Uncertainty {{Quantification}} of a {{Machine Learning Subgrid-Scale Parameterization}} for {{Atmospheric Gravity Waves}}},
  author = {Mansfield, L. A. and Sheshadri, A.},
  date = {2024-07-01},
  journaltitle = {Journal of Advances in Modeling Earth Systems},
  shortjournal = {Journal of Advances in Modeling Earth Systems},
  volume = {16},
  number = {7},
  pages = {e2024MS004292},
  doi = {10.1029/2024MS004292},
  url = {https://doi.org/10.1029/2024MS004292},
  urldate = {2025-03-10},
  abstract = {Abstract Subgrid-scale processes, such as atmospheric gravity waves (GWs), play a pivotal role in shaping the Earth's climate but cannot be explicitly resolved in climate models due to limitations on resolution. Instead, subgrid-scale parameterizations are used to capture their effects. Recently, machine learning (ML) has emerged as a promising approach to learn parameterizations. In this study, we explore uncertainties associated with a ML parameterization for atmospheric GWs. Focusing on the uncertainties in the training process (parametric uncertainty), we use an ensemble of neural networks to emulate an existing GW parameterization. We estimate both offline uncertainties in raw NN output and online uncertainties in climate model output, after the neural networks are coupled. We find that online parametric uncertainty contributes a significant source of uncertainty in climate model output that must be considered when introducing NN parameterizations. This uncertainty quantification provides valuable insights into the reliability and robustness of ML-based GW parameterizations, thus advancing our understanding of their potential applications in climate modeling.},
  keywords = {atmospheric model,climate models,gravity waves,machine learning,parameterizations,uncertainty quantification}
}

@book{Metcalf2023,
  title = {Modern {{Fortran Explained}}: {{Incorporating Fortran}} 2023},
  author = {Metcalf, Michael and Reid, John and Cohen, Malcolm and Bader, Reinhold},
  date = {2023-12-07},
  publisher = {Oxford University Press},
  url = {https://doi.org/10.1093/oso/9780198876571.001.0001},
  urldate = {2025-02-22},
  abstract = {Fortran remains one of the principal programming languages used in high-performance scientific, numerical, and engineering computing. The language as defined by its most recent standards, with their introduction of object-oriented programming and of coarrays, is often referred to generically as ‘Modern Fortran’, and this term is increasingly used in the literature. Thus, we see that Fortran’s particular advantages as a high-end numerical language, especially where arrays are the main form of data object and/or where complex arithmetic is involved, are still to the fore. It is able to attain the highest achievable optimization, mainly because multi-dimensional arrays are ‘natural’ objects and because its pointers are highly constrained. There is every sign that Modern Fortran will continue to be used to tackle major scientific computing problems in the next decade and beyond. This third edition of Modern Fortran Explained offers, in 20 chapters, a comprehensive and uniform description of Fortran 2018. The additional features now brought by the 2023 standard, which are mostly relatively minor in nature, are described in two final chapters, the first on generic programming and the second on other new or enhanced features. This structure enables the reader to distinguish clearly between what is old and what is new. This new edition, written by experts in the field, three of whom have actively contributed to Fortran 2023, is thus a complete and authoritative description of Fortran in its latest form, with the intention that it remain the main reference work in the field.},
  isbn = {978-0-19-887657-1}
}

@inproceedings{Orchard2024,
  title = {{{FTorch}} - Lowering the Technical Barrier of Incorporating {{ML}} into {{Fortran}} Models},
  author = {Orchard, Dominic and Kasoar, Elliott and Atkinson, Jack and Meltzer, Thomas and Clifford, Simon and Elafrou, Athena},
  date = {2024-04-01},
  pages = {17852},
  doi = {10.5194/egusphere-egu24-17852},
  url = {https://ui.adsabs.harvard.edu/abs/2024EGUGA..2617852O},
  abstract = {Across geoscience, numerical models are used for understanding, experimentation, and prediction of complex systems. Many of these models are computationally intensive and involve sub-models for certain processes, often known as parameterisations. Such parameterisations may capture unresolved sub-grid processes, such as turbulence, or represent fast-moving dynamics, such as gravity waves, or provide a combination of the two, such as microphysics schemes.Recently there has been significant interest in incorporating machine learning (ML) methodsinto these parameterisations. Two of the main drivers are the emulation of computationally intensive processes, thereby reducing computational resources required, and the development of data-driven parameterisation schemes that could improve accuracy through capturing 'additional physics'.Integrating ML sub-models in the context of numerical modelling brings a number of challenges, some of which are scientific, others computational. For example, many numerical models are written in Fortran, whilst the majority of machine learning is conducted using Python-based frameworks such as PyTorch that provide advanced ML modelling capabilities. As such there is a need to leverage ML models developed externally to Fortran, rather than the error-prone approach of writing neural networks directly in Fortran, missing the benefits of highly-developed libraries.Interoperation of the two languages requires care, and increases the burden on researchers and developers. To reduce these barriers we have developed the open-source FTorch library [1] for coupling PyTorch models to Fortran. The library is designed to streamline the development process, offering a Fortran interface mimicking the style of the Python library whilst abstracting away the complex details of interoperability to provide a computationally efficient interface.A significant benefit of this approach is that it enables inference to be performed on either CPU or GPU, enabling deployment on a variety of architectures with low programmer effort. We will report on the performance characteristics of our approach, both in the CPU and GPU settings and include a comparison with alternative approaches.This approach has been deployed on two relevant case studies in the geoscience context: a gravity-wave parameterisation in an intermediate complexity atmospheric model (MiMA) based on Espinosa et al. [2], and a convection parameterisation in a GCM (CAM/CESM) based on Yuval et al. [3]. We will report on these applications and lessons learned from their development. [1] FTorch https://github.com/Cambridge-ICCS/FTorch[2] Espinosa et al., Machine Learning Gravity Wave Parameterization Generalizes to Capture the QBO and Response to Increased CO2, GRL 2022 https://doi.org/10.1029/2022GL098174[3] Yuval et al., Use of Neural Networks for Stable, Accurate and Physically Consistent Parameterization of Subgrid Atmospheric Processes With Good Performance at Reduced Precision, GRL 2021 https://doi.org/10.1029/2020GL091363},
  eventtitle = {{{EGU General Assembly Conference Abstracts}}}
}

@article{Prasad2024,
  title = {Modeling Snow on Sea Ice Using Physics-Guided Machine Learning},
  author = {Prasad, Ayush and Merkouriadi, Ioanna and Nummelin, Aleksi},
  date = {2024},
  journaltitle = {Environmental Data Science},
  volume = {3},
  pages = {e28},
  doi = {10.1017/eds.2024.40},
  url = {https://doi.org/10.1017/eds.2024.40},
  abstract = {Snow is a crucial element of the sea ice system, affecting the sea ice growth and decay due to its low thermal conductivity and high albedo. Despite its importance, present-day climate models have a very idealized representation of snow, often including just one-layer thermodynamics, omitting several processes that shape its properties. Even though sophisticated snow process models exist, they tend to be excluded in climate modeling due to their prohibitive computational costs. For example, SnowModel is a numerical snow process model developed to simulate the evolution of snow depth and density, blowing snow redistribution and sublimation, snow grain size, and thermal conductivity in a spatially distributed, multilayer snowpack framework. SnowModel can simulate snow distributions on sea ice floes in high spatial (1-m horizontal grid) and temporal (1-hour time step) resolution. However, for simulations spanning over large regions, such as the Arctic Ocean, high-resolution runs face challenges of slow processing speeds and the need for large computational resources. To address these common issues in high-resolution numerical modeling, data-driven emulators are often used. However, these emulators have their caveats, primarily a lack of generalizability and inconsistency with physical laws. In our study, we address these challenges by using a physics-guided approach in developing our emulator. By integrating physical laws that govern changes in snow density due to compaction, we aim to create an emulator that is efficient while also adhering to essential physical principles. We evaluated this approach by comparing three machine learning models: long short-term memory (LSTM), physics-guided LSTM, and Random Forest, across five distinct Arctic regions. Our evaluations indicate that all models achieved high accuracy, with the physics-guided LSTM model demonstrating the most promising results in terms of accuracy and generalizability. Our approach offers a computationally faster way to emulate the SnowModel with high fidelity and a speedup of over 9000 times.},
  keywords = {emulator,physics-guided ml,Snow on sea ice,SnowModel}
}

